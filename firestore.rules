rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserInRoom(roomId) {
      let room = get(/databases/$(database)/documents/videoRooms/$(roomId));
      return isAuthenticated() && 
             (request.auth.uid in room.data.participants);
    }

    function isDocumentAccessible() {
      return isAuthenticated() && 
             (resource.data.userId == request.auth.uid || 
              request.auth.uid in resource.data.sharedWith);
    }

    // Documents
    match /documents/{documentId} {
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || 
                    request.auth.uid in resource.data.sharedWith);
      allow update: if isAuthenticated() && 
                     (request.auth.uid == resource.data.userId || 
                      request.auth.uid in resource.data.sharedWith);
      allow delete: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
    }

    // Video Rooms
    match /videoRooms/{roomId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && 
                    (request.auth.uid in resource.data.participants ||
                     request.auth.uid in request.resource.data.participants);
      allow delete: if isAuthenticated() && 
                    request.auth.uid == resource.data.createdBy;

      // Messages in video rooms
      match /messages/{messageId} {
        allow read: if isUserInRoom(roomId);
        allow create: if isUserInRoom(roomId) && 
                      request.resource.data.userId == request.auth.uid;
        allow update, delete: if isUserInRoom(roomId) && 
                              resource.data.userId == request.auth.uid;
      }

      // Recordings in video rooms
      match /recordings/{recordingId} {
        allow read: if isUserInRoom(roomId);
        allow create: if isUserInRoom(roomId) && 
                      request.resource.data.createdBy == request.auth.uid;
        allow delete: if isUserInRoom(roomId) && 
                      (resource.data.createdBy == request.auth.uid ||
                       get(/databases/$(database)/documents/videoRooms/$(roomId)).data.createdBy == request.auth.uid);
      }
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
